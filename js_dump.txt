=== FILE: ./bot/index.js ===
const { Client, GatewayIntentBits, AttachmentBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, EmbedBuilder } = require('discord.js');
const path = require('path');
const fs = require('fs').promises;
require('dotenv').config({ path: path.join(__dirname, '../web/.env') });
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.GuildPresences
  ]
});
// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
const scheduledMessages = new Map();
client.once('ready', async () => {
  console.log(`‚úÖ –ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ ${client.user.tag}`);
  console.log(`üìä –ù–∞ ${client.guilds.cache.size} —Å–µ—Ä–≤–µ—Ä–∞—Ö`);
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  try {
    const historyPath = path.join(__dirname, '../web/data/history.json');
    await fs.access(historyPath);
    const historyData = await fs.readFile(historyPath, 'utf8');
    const history = JSON.parse(historyData || '[]');
    
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    const now = new Date();
    for (const item of history) {
      if (item.scheduled && item.scheduledTime && !item.sent && !item.canceled) {
        const scheduledTime = new Date(item.scheduledTime);
        if (scheduledTime > now) {
          scheduleMessage(item);
          console.log(`‚Üª –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${item.id}`);
        }
      }
    }
  } catch (error) {
    console.log('‚Ñπ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é');
  }
});
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendDiscordMessage(channelId, content, files = [], roleId = null, buttons = [], embedData = null) {
  try {
    const channel = await client.channels.fetch(channelId);
    if (!channel) {
      throw new Error('–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    }
    if (!channel.isTextBased()) {
      throw new Error('–£–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º!');
    }
    let finalContent = content;
    if (roleId) {
      finalContent = `<@&${roleId}> ${content}`;
    }
    // –°–æ–∑–¥–∞–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–∏–π
    const attachments = files.map(file => 
      new AttachmentBuilder(file.path, { name: file.originalname })
    );
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    let components = [];
    if (buttons && buttons.length > 0) {
      const row = new ActionRowBuilder();
      buttons.forEach(btn => {
        if (btn.label && btn.url) {
          row.addComponents(
            new ButtonBuilder()
              .setLabel(btn.label)
              .setURL(btn.url)
              .setStyle(ButtonStyle.Link)
          );
        }
      });
      if (row.components.length > 0) {
        components.push(row);
      }
    }
    // –°–æ–∑–¥–∞–Ω–∏–µ embed (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    let embeds = [];
    if (embedData && embedData.title) {
      const embed = new EmbedBuilder()
        .setTitle(embedData.title)
        .setColor(embedData.color || 0x0099FF);
      
      if (embedData.description) embed.setDescription(embedData.description);
      if (embedData.image) embed.setImage(embedData.image);
      if (embedData.thumbnail) embed.setThumbnail(embedData.thumbnail);
      if (embedData.footer) embed.setFooter({ text: embedData.footer });
      
      embeds.push(embed);
    }
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const messageOptions = {
      content: finalContent,
      files: attachments,
      components: components,
      embeds: embeds,
      allowedMentions: { 
        roles: roleId ? [roleId] : [],
        users: []
      }
    };
    const sentMessage = await channel.send(messageOptions);
    return { success: true, messageId: sentMessage.id };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    return { success: false, error: error.message };
  }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
function scheduleMessage(messageData) {
  const { scheduledTime, channelId, content, files, roleId, buttons, embed } = messageData;
  const time = new Date(scheduledTime);
  const now = new Date();
  
  if (time <= now) {
    return { success: false, error: '–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!' };
  }
  
  const timeout = time.getTime() - now.getTime();
  
  if (timeout > 2147483647) {
    return { success: false, error: '–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –≤—Ä–µ–º—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è! –ú–∞–∫—Å–∏–º—É–º 24 –¥–Ω—è.' };
  }
  
  const timerId = setTimeout(async () => {
    try {
      await sendDiscordMessage(channelId, content, files, roleId, buttons, embed);
      console.log(`‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª ${channelId}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
      try {
        const historyPath = path.join(__dirname, '../web/data/history.json');
        const historyData = await fs.readFile(historyPath, 'utf8');
        let history = JSON.parse(historyData || '[]');
        
        const index = history.findIndex(item => item.id === messageData.id);
        if (index !== -1) {
          history[index].sent = true;
          history[index].sentAt = new Date().toISOString();
          await fs.writeFile(historyPath, JSON.stringify(history, null, 2));
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  }, timeout);
  
  scheduledMessages.set(messageData.id, timerId);
  return { success: true, id: messageData.id };
}
// –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function cancelScheduledMessage(messageId) {
  const timerId = scheduledMessages.get(messageId);
  if (timerId) {
    clearTimeout(timerId);
    scheduledMessages.delete(messageId);
    return true;
  }
  return false;
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞
async function getGuildData(guildId) {
  try {
    const guild = await client.guilds.fetch(guildId);
    await guild.members.fetch(); // –ö—ç—à–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    await guild.roles.fetch();   // –ö—ç—à–∏—Ä—É–µ–º —Ä–æ–ª–∏
    await guild.channels.fetch(); // –ö—ç—à–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã
    const channels = guild.channels.cache
      .filter(ch => ch.isTextBased() && ch.viewable)
      .map(ch => ({ 
        id: ch.id, 
        name: `#${ch.name}`, 
        type: ch.type 
      }));
    const roles = guild.roles.cache
      .filter(role => !role.managed && role.name !== '@everyone' && !role.tags)
      .map(role => ({ 
        id: role.id, 
        name: role.name, 
        color: role.hexColor 
      }));
    return { channels, roles, guildName: guild.name };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞:', error);
    return { channels: [], roles: [], guildName: 'Unknown' };
  }
}
client.login(process.env.BOT_TOKEN);
module.exports = {
  client,
  sendDiscordMessage,
  scheduleMessage,
  cancelScheduledMessage,
  getGuildData
};


=== FILE: ./web/public/js/script.js ===
document.addEventListener('DOMContentLoaded', function() {
    // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
    const newsForm = document.getElementById('newsForm');
    const contentTextarea = document.getElementById('content');
    const channelSelect = document.getElementById('channel');
    const roleSelect = document.getElementById('role');
    const attachmentsInput = document.getElementById('attachments');
    const previewContent = document.getElementById('previewContent');
    const scheduleCheckbox = document.getElementById('schedule');
    const scheduleDate = document.getElementById('scheduleDate');
    const addButtonBtn = document.getElementById('addButton');
    const buttonsContainer = document.getElementById('buttonsContainer');
    const filePreview = document.getElementById('filePreview');
    
    let currentFiles = [];
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    updatePreview();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    contentTextarea.addEventListener('input', updatePreview);
    channelSelect.addEventListener('change', updatePreview);
    roleSelect.addEventListener('change', updatePreview);
    attachmentsInput.addEventListener('change', handleFileSelect);
    scheduleCheckbox.addEventListener('change', toggleScheduler);
    addButtonBtn.addEventListener('click', addButtonRow);
    
    function getCSRFToken() {
        return document.querySelector('input[name="_csrf"]').value;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã
    newsForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const submitBtn = this.querySelector('button[type="submit"]');
        const originalText = submitBtn.innerHTML;
        
        try {
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="bi bi-arrow-repeat spin"></i> –û—Ç–ø—Ä–∞–≤–∫–∞...';
            
            const csrfToken = getCSRFToken();            
            const formData = new FormData(newsForm);

            // –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ (–∏—Ö –Ω–µ—Ç –∫–∞–∫ name-–ø–æ–ª–µ–π)
            formData.set('buttons', JSON.stringify(getButtonsData()));

            // (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ï—Å–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –≤–∫–ª—é—á—ë–Ω csurf –∏ –æ–Ω –∂–¥—ë—Ç —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ:
            const csrf = formData.get('_csrf');
            const headers = csrf ? { 'X-CSRF-Token': csrf } : undefined;

            const response = await fetch('/api/send-news', {
                method: 'POST',
                headers,
                body: formData
            });
            
            const result = await response.json();
            
            if (result.success) {
                showModal('‚úÖ –£—Å–ø–µ—Ö', result.message);
                resetForm();
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
                setTimeout(() => window.location.reload(), 2000);
            } else {
                showModal('‚ùå –û—à–∏–±–∫–∞', result.error || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            showModal('‚ùå –û—à–∏–±–∫–∞', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ');
        } finally {
            submitBtn.disabled = false;
            submitBtn.innerHTML = originalText;
        }
    });
    
    // –§—É–Ω–∫—Ü–∏–∏
    function updatePreview() {
        const content = contentTextarea.value;
        const roleId = roleSelect.value;
        const channelId = channelSelect.value;
        
        let previewHtml = '';
        
        if (roleId) {
            const roleName = roleSelect.options[roleSelect.selectedIndex].text;
            previewHtml += `<p><span class="role-mention">@${roleName}</span> `;
        }
        
        // –†–µ–Ω–¥–µ—Ä–∏–º Markdown
        try {
            previewHtml += marked.parse(content || '*–¢–µ–∫—Å—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å...*');
        } catch (error) {
            previewHtml += content;
        }
        
        // –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤
        if (currentFiles.length > 0) {
            previewHtml += '<div class="mt-3"><strong>–í–ª–æ–∂–µ–Ω–∏—è:</strong><div class="d-flex flex-wrap mt-2">';
            currentFiles.forEach(file => {
                if (file.type.startsWith('image/')) {
                    previewHtml += `<img src="${URL.createObjectURL(file)}" class="upload-preview" alt="${file.name}">`;
                } else {
                    previewHtml += `
                        <div class="file-preview-item">
                            <i class="bi bi-file-earmark"></i>
                            <span>${file.name}</span>
                        </div>
                    `;
                }
            });
            previewHtml += '</div></div>';
        }
        
        // –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–Ω–æ–ø–æ–∫
        const buttons = getButtonsData();
        if (buttons.length > 0) {
            previewHtml += '<div class="mt-3"><strong>–ö–Ω–æ–ø–∫–∏:</strong><div class="mt-2">';
            buttons.forEach(btn => {
                if (btn.label && btn.url) {
                    previewHtml += `<a href="${btn.url}" class="button" target="_blank">${btn.label}</a>`;
                }
            });
            previewHtml += '</div></div>';
        }
        
        previewContent.innerHTML = previewHtml || '<p class="text-muted">–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä...</p>';
    }
    
    function handleFileSelect(event) {
        const files = Array.from(event.target.files);
        currentFiles = files;
        
        filePreview.innerHTML = '';
        
        files.forEach(file => {
            const fileItem = document.createElement('div');
            fileItem.className = 'file-preview-item';
            
            if (file.type.startsWith('image/')) {
                fileItem.innerHTML = `
                    <img src="${URL.createObjectURL(file)}" class="upload-preview" alt="${file.name}">
                    <span>${file.name} (${formatFileSize(file.size)})</span>
                `;
            } else {
                fileItem.innerHTML = `
                    <i class="bi bi-file-earmark me-2"></i>
                    <span>${file.name} (${formatFileSize(file.size)})</span>
                `;
            }
            
            filePreview.appendChild(fileItem);
        });
        
        updatePreview();
    }
    
    function formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
    
    function toggleScheduler() {
        scheduleDate.style.display = scheduleCheckbox.checked ? 'block' : 'none';
        if (scheduleCheckbox.checked) {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É (—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + 1 –º–∏–Ω—É—Ç–∞)
            const now = new Date();
            now.setMinutes(now.getMinutes() + 1);
            document.getElementById('scheduledTime').min = now.toISOString().slice(0, 16);
        }
    }
    
    function addButtonRow() {
        const buttonItem = document.createElement('div');
        buttonItem.className = 'button-item mb-2 fade-in';
        buttonItem.innerHTML = `
            <div class="input-group">
                <input type="text" class="form-control" placeholder="–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏" maxlength="80">
                <input type="url" class="form-control" placeholder="https://example.com">
                <button type="button" class="btn btn-danger remove-btn">
                    <i class="bi bi-trash"></i>
                </button>
            </div>
        `;
        
        buttonsContainer.appendChild(buttonItem);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è
        buttonItem.querySelector('.remove-btn').addEventListener('click', function() {
            buttonItem.remove();
            updatePreview();
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        const inputs = buttonItem.querySelectorAll('input');
        inputs.forEach(input => {
            input.addEventListener('input', updatePreview);
        });
    }
    
    function getButtonsData() {
        const buttons = [];
        document.querySelectorAll('.button-item').forEach(item => {
            const labelInput = item.querySelector('input[type="text"]');
            const urlInput = item.querySelector('input[type="url"]');
            
            if (labelInput.value && urlInput.value) {
                buttons.push({
                    label: labelInput.value,
                    url: urlInput.value
                });
            }
        });
        return buttons;
    }
    
    function showModal(title, message) {
        const modalBody = document.getElementById('modalBody');
        modalBody.innerHTML = `
            <h5>${title}</h5>
            <p>${message}</p>
        `;
        
        const modal = new bootstrap.Modal(document.getElementById('resultModal'));
        modal.show();
    }
    
    function resetForm() {
        contentTextarea.value = '';
        roleSelect.value = '';
        attachmentsInput.value = '';
        currentFiles = [];
        filePreview.innerHTML = '';
        buttonsContainer.innerHTML = '<div class="button-item mb-2"><div class="input-group"><input type="text" class="form-control" placeholder="–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏"><input type="url" class="form-control" placeholder="https://example.com"><button type="button" class="btn btn-danger remove-btn"><i class="bi bi-trash"></i></button></div></div>';
        scheduleCheckbox.checked = false;
        scheduleDate.style.display = 'none';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        document.querySelectorAll('.remove-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                this.closest('.button-item').remove();
                updatePreview();
            });
        });
        
        document.querySelectorAll('.button-item input').forEach(input => {
            input.addEventListener('input', updatePreview);
        });
        
        updatePreview();
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è
    document.querySelectorAll('.remove-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            this.closest('.button-item').remove();
            updatePreview();
        });
    });
    
    // –°—Ç–∏–ª—å –¥–ª—è —Å–ø–∏–Ω–Ω–µ—Ä–∞
    const style = document.createElement('style');
    style.textContent = `
        .spin {
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
    `;
    document.head.appendChild(style);
});


=== FILE: ./web/server.js ===
const express = require('express');
const session = require('express-session');
const bcrypt = require('bcryptjs');
const multer = require('multer');
const path = require('path');
const fs = require('fs').promises;
const { v4: uuidv4 } = require('uuid');
const helmet = require('helmet');
const csrf = require('csurf');
const cookieParser = require('cookie-parser');
require('dotenv').config();
const { 
  sendDiscordMessage, 
  scheduleMessage, 
  cancelScheduledMessage, 
  getGuildData 
} = require('../bot/index');

const app = express();
const port = process.env.PORT || 30000;

// Middleware –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      styleSrc: ["'self'", "'unsafe-inline'", "https://cdn.jsdelivr.net"],
      scriptSrc: ["'self'", "https://cdn.jsdelivr.net"],
      imgSrc: ["'self'", "data:", "blob:", "https://cdn.discordapp.com"],
      fontSrc: ["'self'", "https://cdn.jsdelivr.net"]
    }
  }
}));

app.use(cookieParser());
app.use(express.urlencoded({ extended: true }));
app.use(express.json());

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π
app.use(session({
  secret: process.env.SESSION_SECRET,
  resave: false,
  saveUninitialized: false,
  cookie: { 
    secure: false, // –ø–æ—Å—Ç–∞–≤—å true –µ—Å–ª–∏ –µ—Å—Ç—å HTTPS
    maxAge: 24 * 60 * 60 * 1000
  }
}));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CSRF
const csrfProtection = csrf();

// –ú–∏–¥–ª–≤–∞—Ä—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function requireAuth(req, res, next) {
  if (req.session.authenticated) {
    next();
  } else {
    res.redirect('/login');
  }
}

// –ú–∏–¥–ª–≤–∞—Ä—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞
async function attachGuildData(req, res, next) {
  try {
    if (req.session.authenticated && process.env.GUILD_ID) {
      const guildData = await getGuildData(process.env.GUILD_ID);
      res.locals.guildData = guildData;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞:', error);
    res.locals.guildData = { channels: [], roles: [], guildName: 'Error' };
  }
  next();
}
app.use(attachGuildData);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: async (req, file, cb) => {
    const uploadDir = path.join(__dirname, 'public/uploads');
    try {
      await fs.access(uploadDir);
    } catch {
      await fs.mkdir(uploadDir, { recursive: true });
    }
    cb(null, uploadDir);
  },
  filename: (req, file, cb) => {
    const uniqueName = `${Date.now()}-${Math.round(Math.random() * 1E9)}${path.extname(file.originalname)}`;
    cb(null, uniqueName);
  }
});
const upload = multer({
  storage: storage,
  limits: {
    fileSize: 10 * 1024 * 1024,
    files: 10
  },
  fileFilter: (req, file, cb) => {
    const allowedTypes = /jpeg|jpg|png|gif|pdf|txt|zip|mp4|webm/;
    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());
    const mimetype = allowedTypes.test(file.mimetype);
    if (mimetype && extname) {
      return cb(null, true);
    } else {
      cb(new Error('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞!'));
    }
  }
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static(path.join(__dirname, 'public')));

// ===== –ú–∞—Ä—à—Ä—É—Ç—ã =====
app.get('/login', csrfProtection, (req, res) => {
  if (req.session.authenticated) {
    return res.redirect('/');
  }
  res.render('login', { 
    csrfToken: req.csrfToken(), 
    error: null 
  });
});

app.post('/login', csrfProtection, async (req, res) => {
  const { password } = req.body;
  
  if (!password) {
    return res.render('login', { 
      csrfToken: req.csrfToken(), 
      error: '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å' 
    });
  }
  
  try {
    const isMatch = await bcrypt.compare(password, process.env.ADMIN_PASSWORD_HASH);
    
    if (isMatch) {
      req.session.authenticated = true;
      res.redirect('/');
    } else {
      res.render('login', { 
        csrfToken: req.csrfToken(), 
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' 
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
    res.render('login', { 
      csrfToken: req.csrfToken(), 
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});

app.get('/logout', (req, res) => {
  req.session.destroy(() => {
    res.redirect('/login');
  });
});

app.get('/', requireAuth, csrfProtection, async (req, res) => {
  try {
    let history = [];
    const historyPath = path.join(__dirname, 'data/history.json');
    
    try {
      await fs.access(historyPath);
      const historyData = await fs.readFile(historyPath, 'utf8');
      history = JSON.parse(historyData || '[]');
    } catch {
      await fs.mkdir(path.dirname(historyPath), { recursive: true });
      await fs.writeFile(historyPath, JSON.stringify(history, null, 2));
    }
    
    res.render('dashboard', {
      csrfToken: req.csrfToken(),
      channels: res.locals.guildData?.channels || [],
      roles: res.locals.guildData?.roles || [],
      guildName: res.locals.guildData?.guildName || 'Discord Server',
      history: history.slice(-20).reverse()
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ dashboard:', error);
    res.status(500).send('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
  }
});

app.post('/api/send-news', requireAuth, csrfProtection, upload.array('attachments'), async (req, res) => {
  try {
    const { channel, role, content, scheduledTime, buttons } = req.body;
    
    if (!channel || !content) {
      return res.status(400).json({ success: false, error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' });
    }

    const files = req.files ? req.files.map(file => ({
      originalname: file.originalname,
      path: file.path,
      size: file.size,
      mimetype: file.mimetype
    })) : [];

    let buttonArray = [];
    try {
      if (buttons) {
        buttonArray = JSON.parse(buttons);
        buttonArray = buttonArray.filter(btn => 
          btn && btn.label && btn.url && 
          btn.label.length <= 80 && 
          btn.url.startsWith('http')
        ).slice(0, 5);
      }
    } catch {}

    const messageData = {
      id: uuidv4(),
      channelId: channel,
      content: content,
      files: files,
      roleId: role || null,
      buttons: buttonArray,
      scheduled: !!scheduledTime,
      scheduledTime: scheduledTime || new Date().toISOString(),
      createdAt: new Date().toISOString(),
      sent: !scheduledTime,
      canceled: false
    };

    const historyPath = path.join(__dirname, 'data/history.json');
    let history = [];
    
    try {
      const historyData = await fs.readFile(historyPath, 'utf8');
      history = JSON.parse(historyData || '[]');
    } catch {}

    history.push(messageData);
    await fs.writeFile(historyPath, JSON.stringify(history, null, 2));

    if (scheduledTime) {
      const result = scheduleMessage(messageData);
      if (result.success) {
        res.json({ success: true, message: '‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ!', messageId: messageData.id });
      } else {
        res.status(400).json({ success: false, error: result.error });
      }
    } else {
      const result = await sendDiscordMessage(channel, content, files, role, buttonArray);
      if (result.success) {
        const index = history.findIndex(item => item.id === messageData.id);
        if (index !== -1) {
          history[index].sent = true;
          history[index].sentAt = new Date().toISOString();
          history[index].messageId = result.messageId;
          await fs.writeFile(historyPath, JSON.stringify(history, null, 2));
        }
        res.json({ success: true, message: '‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', messageId: result.messageId });
      } else {
        res.status(500).json({ success: false, error: result.error });
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    res.status(500).json({ success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post('/api/cancel-scheduled/:id', requireAuth, csrfProtection, async (req, res) => {
  try {
    const { id } = req.params;
    const canceled = cancelScheduledMessage(id);
    
    if (canceled) {
      const historyPath = path.join(__dirname, 'data/history.json');
      const historyData = await fs.readFile(historyPath, 'utf8');
      let history = JSON.parse(historyData || '[]');
      
      const index = history.findIndex(item => item.id === id);
      if (index !== -1) {
        history[index].canceled = true;
        history[index].canceledAt = new Date().toISOString();
        await fs.writeFile(historyPath, JSON.stringify(history, null, 2));
      }
      
      res.json({ success: true, message: '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ' });
    } else {
      res.status(404).json({ success: false, message: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

app.get('/api/channels', requireAuth, async (req, res) => {
  try {
    const guildData = await getGuildData(process.env.GUILD_ID);
    res.json(guildData.channels);
  } catch {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤' });
  }
});

app.get('/api/roles', requireAuth, async (req, res) => {
  try {
    const guildData = await getGuildData(process.env.GUILD_ID);
    res.json(guildData.roles);
  } catch {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π' });
  }
});

// ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ =====
app.use((error, req, res, next) => {
  console.error(error);
  if (error.code === 'EBADCSRFTOKEN') {
    return res.status(403).send('–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π CSRF —Ç–æ–∫–µ–Ω');
  }
  res.status(500).send(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`);
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, '0.0.0.0', () => {
  console.log(`üåê –í–µ–±-–ø–∞–Ω–µ–ª—å –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ http://localhost:${port}`);
  console.log(`ü§ñ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏`);
});

module.exports = app;



=== FILE: ./generate-password.js ===
const bcrypt = require('bcryptjs');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

rl.question('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: ', async (password) => {
  const saltRounds = 12;
  const hash = await bcrypt.hash(password, saltRounds);
  console.log(`\n–•–µ—à –ø–∞—Ä–æ–ª—è: ${hash}`);
  console.log('–î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ web/.env —Ñ–∞–π–ª –∫–∞–∫ ADMIN_PASSWORD_HASH');
  rl.close();
});


